#include <graphics.h>
#include <dos.h>
#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
void box (int x1, int y1, int x2, int y2, int relleno, int color){
	int poly[8];
	poly [0]=x1;	poly [1]=y1;
	poly [2]=x2;	poly [3]=y1;
	poly [4]=x2;	poly [5]=y2;
	poly [6]=x1;	poly [7]=y2;
	setfillstyle(relleno,color);
	fillpoly(4,poly);
}

void InicializarEnAzul(){
	int gm, gd=DETECT;
	initgraph(&gd, &gm,"c:\\turboc3\\bgi");
	box(0,0,getmaxx(),getmaxy(),1,1);
}
void GenerateMatrix(int Matrix[15][4]){
	int i, j;
	for(i=0; i<15; i++){
		for (j=0; j<4; j++)	Matrix[i][j]=0;
	}
}
void GenerateBoard(){
	int i, j;
	for(i=0; i<15; i++){
		for (j=0; j<4; j++)	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);
	}
		for (j=0; j<4; j++)	box(i*30+70,j*30+130,i*30+100,j*30+160,1,2);
}
void PlaceMines(int Matrix[15][4]){
	Matrix[1][1]=1;		Matrix[2][3]=1;
	Matrix[3][0]=1;		Matrix[4][1]=1;		Matrix[5][3]=1;
	Matrix[6][1]=1; 	Matrix[7][2]=1;		Matrix[8][0]=1;
	Matrix[9][2]=1;		Matrix[10][3]=1;	Matrix[11][0]=1;
	Matrix[12][3]=1;	Matrix[13][0]=1;	Matrix[14][2]=1;
	Matrix[11][1]=1;
}
int SelectStart(){
	int i=1, r=0;
	char tecla;
	settextstyle(7,0,1);
	outtextxy(100,80,"Selecciona una fila para empezar");
	do{
		switch(i){
			case 0:	box(70,130,100,160,1,4);	break;
			case 1:	box(70,160,100,190,1,4);	break;
			case 2:	box(70,190,100,220,1,4);	break;
			case 3:	box(70,220,100,250,1,4);	break;
		}
		tecla=getch();
		switch(i){
			case 0:	box(70,130,100,160,1,3); 	break;
			case 1:	box(70,160,100,190,1,3);	break;
			case 2:	box(70,190,100,220,1,3);	break;
			case 3:	box(70,220,100,250,1,3);	break;
		}
		switch(tecla){
			case 0: tecla = getch();
				switch(tecla){
					case 77: i++;	break;
					case 75: i--;	break;
					case 72: i--;	break;
					case 80: i++;	break;
				}
				if (i<0) i=3;
				if (i>3) i=0;
				break;
			case 13:
				switch(i){
					case 0: box(70,130,100,160,1,3); r=0; tecla=27; break;
					case 1: box(70,160,100,190,1,3); r=1; tecla=27; break;
					case 2: box(70,190,100,220,1,3); r=2; tecla=27; break;
					case 3: box(70,220,100,250,1,3); r=3; tecla=27; break;
				}
			break;
		}
	}
	while (tecla!=27);
	return r;
}
int PlayGame(int start, int Matrix[15][4], int &points){
	box(0,0,getmaxx(),getmaxy(),1,1);
	GenerateBoard();
	int j=start,i=0,end, aux_i, aux_j;
	char tecla, InGamePoints[4];
	outtextxy(20,80,"Las minas han sido plantadas, proceda con precaucion :D");
	do{
		switch(i){
			case 0:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 1:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 2:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 3:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
		}
		switch(j){
			case 0:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 1:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 2:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
			case 3:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,4);	break;
		}
		tecla=getch();
		switch(i){
			case 0:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 1:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 2:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 3:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
		}
		switch(j){
			case 0:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 1:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 2:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
			case 3:	box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);	break;
		}
		switch(tecla){
			case 0: tecla = getch();
				switch(tecla){
					case 77: i++; points-=100;	break;
					case 75: i--; points-=100;  break;
					case 72: j--; points-=100;  break;
					case 80: j++; points-=100;	break;
				}
				if (i<0) i=0;
				if (i>14){
					end=1; tecla=27;
				}
				if (j<0)	j=0;
				if (j>3)	j=3;
				if (points =< -100;) points= -100;
				break;
			case 27: end=3;
		}
		if (Matrix[i][j]==1){
			end=2; tecla =27;
		}
		box(100,300,250,350,1,2);
		itoa(points, InGamePoints, 10);
		outtextxy(100,300, "Puntos");
		outtextxy(180,300, InGamePoints);
		
	}
	while (tecla!=27);
	box(0,0,getmaxx(),getmaxy(),1,1);
	GenerateBoard();
	aux_i=i;
	aux_j=j;
	for(i=0; i<aux_i; i++){
		for (j=0; j<4; j++){
			if(Matrix[i][j]==0)box(i*30+70,j*30+130,i*30+100,j*30+160,1,3);
			else if(Matrix[i][j]==1)box(i*30+70,j*30+130,i*30+100,j*30+160,1,0);
		}
		box(aux_i*30+70,aux_j*30+130,aux_i*30+100,aux_j*30+160,1,4);

	}
	return end;

}
void start(){
	int Matrix[15][4],Game,points=2000;
	char endPoints[4];
	GenerateMatrix(Matrix);
	PlaceMines(Matrix);
	GenerateBoard();
	Game=PlayGame(SelectStart(), Matrix,points);
	itoa(points, endPoints, 10);
	if (Game == 1){
		outtextxy(180,80,"Felicidades, HAS GANADO");
		outtextxy(100,380, "Ha obtenido");
		outtextxy(200,380, endPoints);
	}
	if (Game == 2)	outtextxy(180,80,"Oh no, HAS PERDIDO D:");
	if (Game == 3)	outtextxy(120,80,"Has presionado la tecla para salir");
	getch();
}
void main(){
	InicializarEnAzul();
	start();
}
