U = {"a", "b", "c", "d", "e"}
A = {"a", "b", "d"}
B = {"b", "d", "e"}
C = {"a", "b", "e"}

print("a: AuB = ", A.union(B))
print("b: AuC = ", A.union(C))
print("c: BuC = ", B.union(C))
print("d: BuB = ", B.union(B))
print("e: AnB = ", A.intersection(B))
print("f: An(BuC) = ", A.intersection(B.union(C)))
print("g: AnA = ", A.intersection(A))
print("h: BnC = ", B.intersection(C))
print("i: (AnB)nC = ", A.intersection(B).intersection(C))
print("j: An(BnC) = ", A.intersection(B.intersection(C)))
print("k: A-B = ", A.difference(B))
print("l: (A')' = ", A.symmetric_difference(A.symmetric_difference(U)))
print("m: C-A = ", C.difference(A))
print("n: B-C = ", B.difference(C))
print("o: B-A = ", B.difference(A))
print("p: BnA' = ", B.intersection(A.symmetric_difference(U)))
print("q: A-A = ", A.difference(A))
print("r: A' = ", A.symmetric_difference(U))
print("s: B' = ", B.symmetric_difference(U))
print("t: (AnC)' = ", A.intersection(C).symmetric_difference(U))
print("u: U' = ", U.symmetric_difference(U))
print("v: AuA' = ", A.union(A.symmetric_difference(U)))
print("w: AnA' = ", A.intersection(A.symmetric_difference(U)))
print("x: Ã˜ = ", U.symmetric_difference(U))
print("y: A'uC' = ", A.symmetric_difference(U).union(C.symmetric_difference(U)))
print("z: (AuB)' = ", A.union(B).symmetric_difference(U))
print("aa: A'nB' = ", A.intersection(B.symmetric_difference(U)))
print("ab: (B-C)' = ", B.difference(C).symmetric_difference(U))
print("ac: AuB' = ", A.union(B.symmetric_difference(U)))
print("ad: B'-A' = ", B.symmetric_difference(U).difference(A.symmetric_difference(U)))